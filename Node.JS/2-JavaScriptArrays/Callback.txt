métodos de callback

En esta clase presentamos un nuevo concepto, el de las funciones callback.

El término callback se refiere a una función que se "devuelve en la ejecución" desde dentro de otra función. Luego del lanzamiento de ES6 (también conocido como EcmaScript 2015) 
se consolidó el uso de este tipo de método, por lo que es importante entender cómo usarlo.

JavaScript moderno proporciona muchos métodos diferentes y funciones de callback, no solo para usar con arreglos. Sin embargo, la estructura de la función sigue siendo similar.
Cree un nuevo archivo index.js y cree un arreglo de números:

const arrayNums = [1, 2, 3, 4]COPIA EL CÓDIGO
Usemos map() para multiplicar cada uno de los valores de este arreglo por 10 y devolver un nuevo arreglo con los resultados. Antes de escribir el map(), creemos la función de 
callback; es decir, la función que llamaremos (call) cuando ejecutemos el método map():

function multiplicaPorDiez(num) {
 return num * 10
}COPIA EL CÓDIGO
Ahora podemos llamar a map() para hacer la operación:

const arraySumado = arrayNums.map(multiplicaPorDiez)

console.log(arraySumado )COPIA EL CÓDIGO
El resultado en la terminal debería ser [ 10, 20, 30, 40 ].

IMPORTANTE: Observa la función multiplicaPorDiez Cuando creamos esta función, especificamos que necesita recibir el parámetro (num) para ejecutarse correctamente. Sin embargo, 
cuando se llama dentro de arrayNums.map(), no pasamos ningún parámetro y aún funcionó. ¿Que sucedió ?

Para entenderlo mejor, reescribamos el código, pasando la función multiplicaPorDiez(num) directamente como parámetro de map():

const arraySumado = arrayNums.map(num => num * 10)

console.log(arraySumado)COPIA EL CÓDIGO
En el código anterior, reemplazamos una función externa con nombre (la función multiplicaPorDiez), con una función de flecha anónima que existe solo dentro de map(). Pero esta 
función anónima también tiene un parámetro, num, que representa cada uno de los elementos del arreglo que map() iterará.

Por lo tanto, cuando usamos una función externa como callback en map(), no fue necesario pasar un parámetro. map() ejecuta automáticamente el bloque de código de función (en este 
caso, num * 10) para cada elemento del arreglo.

Ambos casos de uso son válidos; Las funciones externas permiten la reutilización de código, pero hay muchas ocasiones en las que esto no es necesario.

Para JavaScript, cualquier función que se llame como argumento de otra función se considera una función de callback, no solo en el caso de los métodos. Puedes ver otros ejemplos en
 MDN