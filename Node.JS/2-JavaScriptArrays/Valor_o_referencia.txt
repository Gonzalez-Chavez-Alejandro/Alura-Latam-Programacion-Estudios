En el video anterior, observó cómo clonar correctamente un arreglo en JavaScript. La asignación directa de un arreglo a otro con el signo = hace que JavaScript comprenda 
que son el mismo arreglo. Para evitar este comportamiento, debemos crear un arreglo completamente nuevo, con la ayuda del spread operator… (u operador de extensión).

Sin embargo, este comportamiento no ocurre con cadenas, números y booleanos, que son tipos primitivos de JavaScript.

Considere el siguiente código:

let num1 = 10;
let num2 = num1;

num2 += 5;
num1 += 1;

console.log(`Num1 es ${num1}. Num2 es ${num2}`);COPIA EL CÓDIGO
Al ejecutar el código tendremos la sentencia “Num1 es 11. Num2 es 15”. Es decir, con el código let num2 = num1, JavaScript entiende que queremos crear una copia de num1 y 
crea una nueva variable, con su propio espacio en la memoria almacenando su valor. Entonces, al modificar una de las variables, la otra no se modifica.

Este comportamiento de copiar un valor primitivo y asignarlo a una nueva variable se denomina asignación por valor y solo ocurre con los tipos primitivos de JavaScript.

El mismo comportamiento ocurre cuando se trabaja con parámetros de función. Vea el siguiente ejemplo:

let numeroOriginal = 10;

function actualizaNumero(numero) {
  numero = 50;

  console.log(`El número pasado como parámetro es ${numero}. numeroOriginal es ${numeroOriginal}`);
}

actualizaNumero(numeroOriginal);COPIA EL CÓDIGO
Ejecutando el código, tendremos la frase “El número pasado como parámetro es 50. numeroOriginal es 10”. Al llamar a la función pasando numeroOriginal como parámetro,
 se hizo una copia de su valor para usarla como parámetro numérico dentro de la función. De esa manera, incluso cambiando el número dentro de la función, numeroOriginal
  permanece sin cambios.

Pero cómo viste, con los arreglos no funciona así, después de todo, no son un tipo primitivo. Considere el ejemplo utilizado en el video anterior:

const notas = [7, 7, 8, 9];

const nuevasNotas = notas;

nuevasNotas.push(10);

console.log(`Las nuevas notas son ${nuevasNotas}`);
console.log(`Las notas originales son ${notas}`);COPIA EL CÓDIGO
A partir del código const nuevasNotas = notas, JavaScript entiende que las notas nuevas y las notas se convierten en el mismo arreglo, y ahora apuntan al mismo 
espacio en la memoria. Como estamos tratando con datos más complejos, JavaScript hace esto de forma predeterminada para optimizar la memoria y el rendimiento, 
en lugar de copiar el arreglo en cada nueva asignación.

La asignación de un arreglo se denomina asignación por referencia, porque pasa la referencia al arreglo en sí, no una copia de su valor.

El mismo comportamiento ocurre cuando se trabaja con parámetros de función. Vea el código a continuación:

const arrayOriginal = [7, 7, 8, 9];

function actualizaArray(array) {
  array.push(10);

  console.log(`El array recibido como parámetro es ${array}`);
  console.log(`El arrayOriginal es ${arrayOriginal}`);
}

actualizaArray(arrayOriginal);COPIA EL CÓDIGO
Ejecutando el código, obtenemos este resultado:

El array recibido como parámetro es 7,7,8,9,10
El arrayOriginal es 7,7,8,9,10COPIA EL CÓDIGO
Después de pasar arrayOriginal como parámetro de actualizaArray, lo usamos como parámetro de arreglo. El código array.push(10) cambió ambos arreglos, 
tal como sucedió en el ejemplo en el que hicimos la asignación. Es decir, nuevamente, se pasó la referencia de arreglo en sí, no una copia de ella.

Análogamente a la solución en el video, si queremos pasar una copia de la matriz y no su referencia, cambiamos el código actualizaArray(arrayOriginal) 
a actualizaArray([...arrayOriginal]).

Entonces, la salida será:

El array recibido como parámetro es 7,7,8,9,10
El arrayOriginal es 7,7,8,9