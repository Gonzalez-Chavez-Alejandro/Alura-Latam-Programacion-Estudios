Haga lo que hicimos en aula: estructura del reduce

Durante la clase trabajamos con el método reduce() para “reducir” una lista de números a un solo valor. Este método funciona con parámetros que son un poco diferentes a 
los demás que vimos durante el curso. Por lo tanto, vamos despiezar el ejemplo de la clase para comprender mejor las partes del código.

En su editor, cree un archivo index.js y ejecute el siguiente código:

const numeros = [43, 50, 65, 12]

const suma = numeros.reduce((acc, actual) => actual + acc, 0)

console.log(suma) //170COPIA EL CÓDIGO
El código anterior es muy similar a lo que se hizo durante la clase. Es importante observar que:

El método reduce() funciona con dos parámetros. El primero es la función de callback obligatoria para devolver el cálculo y el segundo parámetro es un número que 
representa el valor inicial del acumulador, en este caso, 0.

La función de callback se escribió directamente dentro de reduce(), y esta función también recibe dos parámetros, ambos obligatorios: el valor acumulado y 
el valor actual.

La función de callback se escribió en forma de función de flecha; en este caso, cuando solo tenemos una línea de instrucción dentro de la función (acc + actual)
 no necesitamos usar llaves ni la palabra clave return.

Si tiene más de una línea de declaración dentro de una función de flecha, se requieren nuevamente las llaves {} y la palabra clave return.

Reescribamos reduce() un poco más extensamente para separar mejor las partes del código:

const suma = numeros.reduce(function (acc, actual) {
 return actual + acc
}, 0)COPIA EL CÓDIGO
Mirando el código anterior, puedes entender mejor dónde comienza y termina cada uno de los parámetros de reduce(): el primer parámetro, una función y 
el segundo, un número.

Una tercera forma de reescribirlo sería escribir la función de callback fuera de reduce():

function operacionNumerica(acc, actual) {
 return actual + acc
}

const suma = numeros.reduce(operacionNumerica, 0)COPIA EL CÓDIGO
El reduce() ejecuta el bucle en la matriz internamente, ejecutando para cada elemento la instrucción pasada como argumento a la función de 
operacionNumerica.

En la vida cotidiana, la forma que utilizamos en el vídeo es la más habitual. Sin embargo, durante tus estudios, puedes practicar de la manera 
que te resulte más clara.

¡Es importante recordar que cada método puede aceptar recibir diferentes parámetros! Algunos son obligatorios, otros opcionales. Consulte siempre
 la documentación del lenguaje.