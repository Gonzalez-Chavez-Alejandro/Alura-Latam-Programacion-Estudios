Hasta ahora hemos visto varias formas de hacer lo que parece ser lo mismo: for, for...of, forEach()... Con tantas opciones, ¿cómo puedo elegir cuál usar en mi código?

Primero, echemos un vistazo a cada uno de ellos:

for

La forma más "clásica" de bucle o lazo en JavaScript y en la mayoría de los lenguajes de programación, el for es muy conveniente porque se puede usar con cualquier tipo de 
iterable y está construido de una manera que deja muy claro cuáles son todas las "fases". cada ciclo entendiendo como ciclo cada repetición o iteración.

¿Qué es un "iterable"?

Además de los arreglos, las cadenas, los conjuntos y los mapas o diccionarios se consideran iterables. No cubriremos los dos últimos tipos en este curso, pero si está 
interesado en aprender más sobre conjuntos, maps o diccionarios y otras estructuras de datos, puede consultar este artículo; lo que necesitamos saber ahora es que un 
iterable, aquí, representa una secuencia de elementos que se pueden recorrer (es decir, iterar) usando herramientas específicas para eso.

Es importante hacer una distinción entre arreglo e iterable, ya que no todos los métodos que funcionan en un arreglo funcionarán en otros iterables; hablaremos de eso 
más adelante.

const lista = [1, 2, 3, 4, 5];

for (let indice = 0; indice < lista.length; indice++) {
 console.log(lista[indice]); 
}COPIA EL CÓDIGO
Lo que queremos decir con "aclarar las fases de iteración" se puede ver en el ejemplo anterior: la expresión entre paréntesis () después de la palabra clave for.

Dentro de la expresión tenemos:

Una variable de contador, que se crea antes del inicio del bucle (let indice);
Una expresión de prueba (indice < lista.length), que se ejecuta antes de cada iteración y que verifica si el código dentro del bloque {} debe ejecutarse o no;
Finalmente, una expresión que se ejecuta al final de cada bucle, normalmente un incremento (++) o decremento (--) de la variable contador.
Es decir: dado que las fases de cada ciclo se declaran explícitamente, también se pueden cambiar según sea necesario por el código, lo que lo hace muy versátil y 
se puede usar en casos específicos, comparado con otras formas de sintaxis más pequeñas (como las que estudiaremos a continuación) que son más simples pero limitadas.

El ciclo puede ser decremental en lugar de incremental (recorrer un arreglo hacia atrás), a la variable de contador se le puede dar otro valor como let index = 2 
o let index = otra variable + 1 (siempre que este valor se evalúe como un número), la verificación de la condición puede ser el tamaño del arreglo como en el ejemplo, 
u otro (índice < lista.length - 1) y el incremento o decremento al final del ciclo puede recibir cualquier operador aritmético o ser el resultado de una operación, 
como por ejemplo índice = índice + 2 o índice *= 2.

Incluso es posible usar for para ejecutar algoritmos más complejos, lo que no sería posible con otros métodos, por ejemplo:

const lista = [1, 2, 3, 4, 5];

for (let i = 0, j = 0; i < lista.length; i++, j++) {
 console.log(lista[i] + j); 
}

//1
//3
//5
//7
//9COPIA EL CÓDIGO
Todavía hay otras formas de trabajar con las condiciones, que puedes consultar en la documentación de MDN.

for…of

Agregado a las características de JavaScript en la versión ES6, es un tipo diferente de bucle repetitivo que el bucle for tradicional, aunque usa la misma palabra clave:


const lista = [1, 2, 3, 4, 5];
let ​​suma = 0;

para (let elemento of lista) {
  suma += elemento;
}

console.log(suma); //15COPIA EL CÓDIGO
for…of se puede ejecutar usando cualquier tipo de iterable: además de los arreglos, las cadenas, los sets (conjuntos) y los mapas (mapas o diccionarios) se consideran 
objetos iterables. No cubriremos los dos últimos tipos en este curso, pero si está interesado en aprender más sobre conjuntos, diccionarios y otras estructuras de datos, 
puede consultar este artículo; lo que necesitamos saber ahora es que un iterable aquí representa una secuencia de elementos que se pueden recorrer (es decir, iterar) 
usando for…of.

Es importante hacer esta distinción entre arreglo e iterable, ya que no todos los métodos o declaraciones que funcionan en un arreglo funcionarán en otros iterables.

Luciendo así, for…of se parece mucho a for: tenemos la declaración de una variable (let elemento) seguida de la palabra clave of y un identificador del iterable que 
será recorrido (en el caso anterior es un arreglo, lista ).

La diferencia principal y más visible entre for y for…of es que el primero da mucho más control sobre cómo se produce el bucle. Por ejemplo, vimos que en for es posible
 afinar todos los condicionales; en for...of las condiciones son más "estáticas": elemento se refiere a cada elemento (o elemento) del arreglo y el ciclo siempre ocurre 
 secuencialmente, desde el primer elemento hasta el último.

Por otro lado, la sintaxis simplificada y más “legible” para las personas hace que el uso de for…of sea más práctico que for, porque los bucles de repetición son más 
simplificados, los cuales recorren un iterable desde el primer hasta el último elemento y ejecutan el código del bloque en cada iteración y en realidad son mucho más comunes.

forEach()

A diferencia de for y for…of, forEach() es un método del objeto Array.

¿Qué es un método?

En programación, llamamos método a una función que pertenece a un objeto. La documentación de MDN proporciona algunos ejemplos de métodos, pero podrá ver con más detalle 
qué son los objetos y sus propiedades cuando realice el curso de fundamentos de JavaScript: Objetos. Por ahora, sepa que cuando decimos que una determinada función, 
por ejemplo, forEach() es un método de arreglo, significa que esta función se desarrolló para trabajar solo con ese tipo de datos, en este caso, con arreglos.

forEach(), así como otros métodos de arreglos que vimos o veremos durante esta clase, también cumplen el rol de iterar arrays, pero con una funcionalidad y retornos bien definidos.
 En el caso de forEach(), a pesar de la sintaxis muy diferente, podemos usar este método como for o for…of, ya que ejecutará las instrucciones que se pasan a cada elemento iterado,
  sin devolver ningún dato.

forEach(), al igual que algunos otros métodos de arreglos de JavaScript que estamos viendo en el curso, utiliza el enfoque funcional de las funciones de callback para ejecutar el
 código necesario para cada elemento iterado en el bucle:

const lista = [1, 2, 3, 4, 5];
let suma = 0;

lista.forEach(numero => suma += numero);
console.log(suma) //15COPIA EL CÓDIGO
Como se vio anteriormente, el método forEach() recibe una función como parámetro, y esta función a su vez usa cada uno de los elementos del arreglo como parámetro. 
La lógica interna de forEach() manejará la iteración desde el primero hasta el último elemento en el arreglo y hará que el código definido dentro de la función de callback 
(en este caso, solo un incremento suma += número) se ejecute en cada iteración.

El mismo código también podría escribirse de la siguiente manera, un poco más largo pero más legible:

lista.forEach(numero => {
 suma += numero
});COPIA EL CÓDIGO
O bien, utilizando la palabra clave function en lugar de las funciones de flecha; esta forma de escribir es inusual, porque cuando usamos funciones de callback, 
la opción predeterminada adoptada son las funciones de flecha, pero sirve para facilitar la lectura:

lista.forEach(function (numero) {
 suma += numero
});COPIA EL CÓDIGO
Así, vemos que forEach() no devuelve ningún tipo de valor, simplemente ejecuta lo que está dentro del bloque de la función callback, así como for y for…of. Sin embargo,
 tampoco es posible modificar la forma en que se realizará la iteración (siempre es desde el primer elemento del arreglo hasta el último) y no hay forma de interrumpir 
 el ciclo dada alguna condición, mientras que break funcionaría para for normales.

forEach() tampoco se puede usar con cualquier iterable, solo con arreglos y tampoco se puede usar de forma asincrónica: un tema un poco más avanzado en el que no trabajaremos 
en este curso, pero que puede consultar en la documentación de la MDN que habla del tema.

¿Y cuándo debo usar uno u otro?

La respuesta, como ocurre con muchas cosas en la programación, es ¡depende!

Actualmente, en términos de rendimiento, es decir, qué código es ejecutado más rápido por la computadora y consume menos recursos de memoria, tanto los bucles 
for como forEach() no tienen diferencias significativas, aunque todavía pueden ocurrir excepciones, como en el caso de versiones muy antiguas. de navegadores y/o 
manipulación de arreglos muy largos.

Pero en el momento en que desarrollamos este curso, la cuestión del rendimiento no es tan definitoria en la mayoría de los casos, ya que los intérpretes de JavaScript 
ya han evolucionado para funcionar tanto con funciones de callback como con iteradores.


forEach() usa callback, así como map(), filter() y algunos otros métodos de arreglos, lo que facilita el uso de estos métodos juntos o cambiar de uno a otro según la 
necesidad del código o una refactorización. Algunas guías de estilo de código desarrolladas por la comunidad, como la famosa guía de AirBNB, prefieren usar forEach() 
en lugar de for…of para mantener la coherencia en el estilo del código.

for…of, más reciente que forEach(), no es un método de arreglos sino un iterador, al igual que for. Es decir, funcionará con otros tipos de datos iterables además de 
los arreglos, con una sintaxis más simplificada que for.

Como en ambos casos no hay retorno, solo la ejecución del código que está dentro del bloque {} de for…of o la función de callback de forEach(), puedes usar las 
herramientas de la siguiente manera:

forEach() para trabajar con arreglos de la manera más común, pasando del primero al último elemento, sin cambiar la condición de parada, y también para mantener la 
cohesión del estilo cuando se combina con otros métodos de arreglos como map, filter, etc;

for…of en el caso de iterables (mapas o diccionarios, conjuntos y otras estructuras de datos) o arreglos cuando es necesario usar programación asíncrona y/o proporcionar
 condiciones de salida del ciclo (por ejemplo, usando break);

for en los casos que es necesario manipular con precisión las fases del bucle (condición inicial, condición de parada e incremento).