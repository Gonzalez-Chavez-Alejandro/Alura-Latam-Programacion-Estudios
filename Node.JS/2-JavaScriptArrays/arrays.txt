Ya hemos usado algunos métodos de arreglo en esta clase y todavía hay muchos métodos que no hemos visto. Sin embargo, la duda aún puede permanecer: ¿cuáles son los métodos?

Un método es una función que sirve como propiedad de un arreglo o de un objeto (que veremos en otro curso). Puede realizar tareas predefinidas utilizando los datos de la matriz 
y los parámetros que les pasamos, como agregar, eliminar o incluso encontrar elementos.

Hay muchos métodos para poder recordarlos todos, pero vamos a enumerar los principales para aprender. Son ellos:

concat()
Une dos arreglos, colocando el arreglo pasado como argumento, justo después del primer arreglo. En español esta operación se conoce como concatenación.

No cambia el arreglo al que se invocó, por lo que debemos guardar este resultado en un nuevo arreglo

filter()
Devuelve un arreglo con todos los elementos que cumplieron la condición, es decir, una función escrita por nosotros.

No cambia el arreglo donde se llamó, por lo que debemos guardar este resultado en un nuevo arreglo

find()
Funciona de manera similar al filter, pero solo devuelve el primer valor que satisface la condición, que puede ser una cadena o un número.

findIndex()
Funciona como find(), pero devuelve el índice en lugar del elemento, lo que permite usarlo en otras partes del código.

lastIndexOf()
Es como findIndex() pero comienza desde el último elemento, no desde el primero para cada().

forEach()
Ejecuta una función en cada elemento del arreglo individualmente.

No altera el arreglo original ni devuelve un valor, dejando ese trabajo a la función elegida.

pop()
Elimina el último elemento del arreglo.

Altera el arreglo original eliminando el elemento.

shift()
Elimina el primer elemento del arreglo.

Cambia el arreglo original eliminando el primer elemento y cambiando el índice de todos los elementos a uno menos de lo que eran, el índice 1 se convierte en 0, 2 se convierte en 1,
 y así sucesivamente.

push()
Agrega el elemento pasado como parámetro al arreglo, pero en la última posición.

Altera el arreglo con el nuevo valor.

unshift()
Funciona igual que push(), pero agrega en la primera posición y termina cambiando el índice de todos los elementos.

Altera el arreglo original con el nuevo valor.

reduce()
Utiliza una función definida por el usuario en cada uno de los elementos, almacenando el resultado en una variable a la que se puede acceder dentro de la función definida, 
devolviendo al final un único valor, reduciendo el array a un único valor.

reduceRight()
Funciona igual que reduce() pero comienza desde el final de la matriz y continúa hasta el principio.

reverse()
Invierte el orden de los elementos del arreglo, de modo que el primero se convierte en el último, el segundo en el penúltimo, y así sucesivamente.

slice()
Copia una parte del arreglo a otro arreglo.

sort()
Organiza el arreglo según la clasificación Unicode, donde los números van antes que las letras, pero no funciona correctamente para los números, donde tenemos que definir una 
función
 que ayude al comando.

splice()
Consigue eliminar uno o más elementos consecutivos si el segundo parámetro tiene un valor mayor que 0, e incluir uno o más elementos de un índice elegido.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lo que aprendimos en esta aula:

Dividir un arreglo en partes con slice() (usado para obtener dos nuevos arreglos a partir del primero).
Quitar y agregar nuevos elementos a un arreglo con splice(); este método permite eliminar elementos de cualquier posición en el arreglo. Además, podemos agregar un nuevo elemento 
en lugar de los eliminados.
Concatenar elementos en un solo arreglo con concat(); siendo que esta es una manera fácil de unir dos arreglos.
Trabajar con arrays bidimensionales. ¡Vimos que un arreglo también puede almacenar otras listas! Para acceder a elementos de los arreglos más internos, primero debemos informar 
los índices de los más externos y luego los de los más internos, como por ejemplo con funcionarios[0][2].











